<?xml version="1.0" encoding="UTF-8"?>

<!-- ==== #29. mapper 기본설정 ==== -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<!-- ==== #29. 루트 엘리먼트 & 네임스페이스 설정(프로젝트 전체내에서 유일해야 한다.) ==== -->
<mapper namespace="personnel">


 
	
	<select id="sysdate_get"   resultType="String" >
		select to_char(sysdate ,'yyyy-mm-dd')
		from dual
	</select>
	
	 
	
	
	<select id="outingCheck"  parameterType="HashMap"  resultType="String" >
		select workhistoryid
		from tbl_workhistory
		where (fk_empId = #{empid} and worktype =2) and to_char(resisterdaytime,'yyyy' ) = #{year}
	</select>
	
	
	<select id="overtimeCheck"  parameterType="HashMap"  resultType="int" >
		select count(*)
		from tbl_workhistory
		where fk_empid =#{empid} and worktype=8
	</select>
	
	
	<select id="overtimeSum"  parameterType="HashMap"  resultType="int" >
	<![CDATA[ 
		select nvl(sum(hour),0)
from
(
select workappid,workday,  overtimestart,  overtimeend, reason
      
     ,ROUND (( TO_DATE(overtimeend, 'yyyy-mm-dd hh24:mi:ss' )-TO_DATE(overtimestart, 'yyyy-mm-dd hh24:mi:ss' )) * 24 , 2) as hour
     
from
(
    select a.fk_empid,worktype,workappid,workday,to_char(overtimestart,'yyyy-mm-dd hh24:mi:ss' ) as overtimestart,to_char(overtimeend,'yyyy-mm-dd hh24:mi:ss' ) as overtimeend, reason
    from tbl_approval a join tbl_workapplication w
    on a.approvalid = w.fk_approvalid and a.fk_empid=#{empid}
    join  tbl_workhistory x
    on a.fk_empid=x.fk_empid and w.fk_worktype=x.worktype
    where to_char(w.workday,'yyyy-mm-dd' ) =to_char(x.resisterdaytime,'yyyy-mm-dd' )
    and x.fk_empid=#{empid}  and x.worktype=8
    
)workplus join 

(
    select *
    from
    (
        select resisterdaytime as resisterdaytime_start
        from tbl_workhistory
        where (fk_empid=#{empid} and (  worktype=6)) and
                to_char(resisterdaytime,'yyyy-mm-dd') in(select to_char(resisterdaytime,'yyyy-mm-dd') from tbl_workhistory where worktype=8 and fk_empid=#{empid})
    )a   join
    (
        select case when worktype=2 and LEAD(worktype  ) OVER(ORDER BY resisterdaytime) in(5) then   resisterdaytime  
            when worktype=5 and lag(worktype  ) OVER(ORDER BY resisterdaytime)  in (2) then   lag(resisterdaytime  ) OVER(ORDER BY resisterdaytime) 
            when worktype=5 then   resisterdaytime    end as resisterdaytime_end
   
        from tbl_workhistory
        where (fk_empid=#{empid} and (worktype in (5,2,1,3,4) )) and
                to_char(resisterdaytime,'yyyy-mm-dd') in(select to_char(resisterdaytime,'yyyy-mm-dd') from tbl_workhistory where worktype=8 and fk_empid=#{empid})
        order by resisterdaytime
    )b
    on to_char(a.resisterdaytime_start,'yyyy-mm-dd') =to_char(b.resisterdaytime_end,'yyyy-mm-dd')
)   wh
on workplus.workday = to_char(wh.resisterdaytime_start,'yyyy-mm-dd' ) 
where  
(     TO_DATE(overtimestart, 'yyyy-mm-dd hh24:mi:ss' ) >=  TO_DATE( to_char(wh.resisterdaytime_start,'yyyy-mm-dd hh24:mi:ss' )  , 'yyyy-mm-dd hh24:mi:ss' ) )
   and     (   TO_DATE(overtimeend, 'yyyy-mm-dd hh24:mi:ss' ) <= TO_DATE( to_char(wh.resisterdaytime_end,'yyyy-mm-dd hh24:mi:ss' )  , 'yyyy-mm-dd hh24:mi:ss' )
            and     to_date(to_char(wh.resisterdaytime_start, 'yyyy' ), 'yyyy' ) = to_date(#{year}, 'yyyy' )  )
)
]]>
	</select>
	
	
	
	<select id="year_hour"  parameterType="HashMap" resultType="int" >
		<![CDATA[ 
		
		select nvl(sum(dayhh),0)
		from
		(
		select fk_empid,worktype,resisterdaytime 
		                ,ROUND((TO_DATE(    case  
		                when      TO_DATE( to_char(resisterdaytime,'hh24:mi:ss' ), 'HH24:MI:SS') >  TO_DATE(  '18:00:00' , 'HH24:MI:SS')  
		                then '17:00:00'
		                        when   TO_DATE( to_char(resisterdaytime,'hh24:mi:ss' ), 'HH24:MI:SS') <  TO_DATE(  '12:00:00' , 'HH24:MI:SS')  
		                        then to_char(resisterdaytime,'hh24:mi:ss' )   
		                        
		                        when    TO_DATE( to_char(resisterdaytime,'hh24:mi:ss' ), 'HH24:MI:SS') >=  TO_DATE(  '12:00:00' , 'HH24:MI:SS') and 
		                            TO_DATE( to_char(resisterdaytime,'hh24:mi:ss' ), 'HH24:MI:SS') <=  TO_DATE(  '13:00:00' , 'HH24:MI:SS')  
		                            
		                        then '12:00:00'  
		                         
		                    else to_char(resisterdaytime- to_dsinterval('000 01:00:00'),'hh24:mi:ss' ) end    , 'HH24:MI:SS') 
		                    - TO_DATE( '09:00:00'   , 'HH24:MI:SS')  ) * 24* 60, 2) AS dayhh
		        from tbl_workhistory
		        where  ( fk_empid =#{empid}  and  to_char(resisterdaytime,'yyyy' ) = #{year}  )
		        and ( to_char(resisterDayTime,'yyyy-mm-dd') not in (select to_char(resisterDayTime,'yyyy-mm-dd') from tbl_workhistory where fk_empId = 200 and worktype =2)
		        and worktype=5)
		)
		]]>
		 
	</select>
	   
	<select id="year_hour_out" parameterType="HashMap"  resultType="int" >
		<![CDATA[ 
		select nvl(sum(year),0)
from
(
            select  dayhh-nvl(dd,0) as year
        from
        (
            select fk_empid,worktype,resisterdaytime 
                    ,ROUND((TO_DATE(    case when TO_DATE( to_char(resisterdaytime,'hh24:mi:ss' ), 'HH24:MI:SS') >  TO_DATE(  '18:00:00' , 'HH24:MI:SS')then '17:00:00'
                            when TO_DATE( to_char(resisterdaytime,'hh24:mi:ss' ), 'HH24:MI:SS') <  TO_DATE(  '12:00:00' , 'HH24:MI:SS')
                            then to_char(resisterdaytime,'hh24:mi:ss' )   
                            when TO_DATE( to_char(resisterdaytime,'hh24:mi:ss' ), 'HH24:MI:SS') >=  TO_DATE(  '12:00:00' , 'HH24:MI:SS') and 
                                TO_DATE( to_char(resisterdaytime,'hh24:mi:ss' ), 'HH24:MI:SS') <=  TO_DATE(  '13:00:00' , 'HH24:MI:SS') 
                            then '12:00:00'  
                        else to_char(resisterdaytime- to_dsinterval('000 01:00:00'),'hh24:mi:ss' ) end    , 'HH24:MI:SS') 
                        - TO_DATE( '09:00:00'   , 'HH24:MI:SS')  ) * 24* 60, 2) AS dayhh
            from tbl_workhistory
            where  (worktype =5 and fk_empid =#{empid} )and( to_char(resisterdaytime,'yyyy' ) = #{year}  )
             
        ) a join  
        (
            select fk_empid,worktype, resisterdaytime  
                    , case 
                     
                    when  (worktype=2  and LEAD(worktype ) OVER(ORDER BY resisterdaytime) in(1,3,4) ) and( to_date(to_char(resisterdaytime,'hh24:mi:ss' ),'hh24:mi:ss')
                    < to_date('12:00:00','hh24:mi:ss') and 
                    to_date(LEAD(to_char(resisterdaytime,'hh24:mi:ss' ) ) OVER(ORDER BY resisterdaytime),'hh24:mi:ss' ) > to_date('13:00:00','hh24:mi:ss'))
                    then ROUND((to_date(LEAD(to_char(resisterdaytime,'hh24:mi:ss' ) ) OVER(ORDER BY resisterdaytime),'hh24:mi:ss' ) -
                    to_date( to_char(resisterdaytime,'hh24:mi:ss' ), 'hh24:mi:ss') ) * 24* 60, 2) -60
                    
                    
                    when( worktype=2 and LEAD(worktype ) OVER(ORDER BY resisterdaytime) in(1,3,4) )
                     then 
                    ROUND((to_date(LEAD(to_char(resisterdaytime,'hh24:mi:ss' ) ) OVER(ORDER BY resisterdaytime),'hh24:mi:ss' ) -
                    to_date( to_char(resisterdaytime,'hh24:mi:ss' ), 'hh24:mi:ss') ) * 24* 60, 2)  
                    
                    
                     when( worktype=2 and LEAD(worktype ) OVER(ORDER BY resisterdaytime) not in(1,3,4) )  
                    and to_date(to_char(resisterdaytime,'hh24:mi:ss' ),'hh24:mi:ss')   < to_date('12:00:00','hh24:mi:ss') 
                     then 
                     ROUND((to_date ('18:00:00', 'hh24:mi:ss' ) -
                    to_date(   to_char(resisterdaytime,'hh24:mi:ss' )  ,'hh24:mi:ss') ) * 24* 60, 2) -60
                    
                    when worktype=2 and LEAD(worktype ) OVER(ORDER BY resisterdaytime) not in(1,3,4) then 
                     ROUND((to_date ('18:00:00', 'hh24:mi:ss' ) -
                    to_date(   to_char(resisterdaytime,'hh24:mi:ss' )  ,'hh24:mi:ss') ) * 24* 60, 2) 
                    
              
                    end as dd
            from tbl_workhistory
            where   fk_empid =#{empid} and  to_char(resisterdaytime,'yyyy' ) = #{year}
        order by resisterdaytime
        )b
        on to_char(a.resisterdaytime,'yyyy-mm-dd' ) = to_char(b.resisterdaytime,'yyyy-mm-dd' )
        where dd is not null
)
		
		]]>
	</select>
	  
	<select id="workhistory_print"  parameterType="HashMap"  resultType="com.spring.app.personnel.domain.WorkhistoryVO" >
		select *
		from tbl_workhistory
		where (to_char(resisterdaytime,'yyyy-mm-dd') = #{date}  and fk_empid =#{empid})
				and (isdelete=0 and worktype in(1,2,3,4,5,6))
		order by resisterdaytime
	</select>
	
	<insert id="workhistory_insert" parameterType="HashMap" > 
		
		insert into tbl_workhistory
		values (WORKHISTORYSEQ.nextval, #{empid}, #{worktype}, sysdate, default)
	 
	</insert>


	<select id="personnel_search_name"	parameterType="String" resultType="com.spring.app.common.domain.EmployeeVO">


		select	empId, empName, teamName 
		from tbl_employee e
		join tbl_team t on e.fk_teamId = t.teamId
        where empName like '%'||lower(#{empName})||'%'
		order by empName
	 
	</select>
	
	<select id="personnel_selct_empid"	parameterType="String" resultType="String">


		select	empname 
		from tbl_employee
		where empid=#{empid}
	 
	</select>
	
	<select id="vaction_cnt"	parameterType="String" resultType="String">

	<![CDATA[ 
		select case when annualleave-count < 0 then 0
        else annualleave-count end as cntVaction
		from
		(
		    select annualleave
		    from
		    (
		        select  to_date( to_char(sysdate, 'yyyy-mm-dd'), 'yyyy-mm-dd')-to_date( to_char(startworkday, 'yyyy-mm-dd'), 'yyyy-mm-dd'),
		                floor( MONTHS_BETWEEN(to_char(sysdate, 'yyyy-mm-dd') ,to_char(startworkday, 'yyyy-mm-dd')) /12 ) as startyear
		        from tbl_employee
		        where empid = #{empid}
		        
		    ) a join tbl_annual b
		    on a.startyear = b.years
		)x join 
		 
		(
		    select nvl(sum(cnt),0) as count
		    from
		    (
		    select         case when worktype=7 then 1
		                else 0.5 end as cnt
		    from tbl_workhistory
		    where fk_empid=#{empid} and( (worktype=7 or worktype=2) or
		        ( worktype=5 and to_date(to_char(resisterdaytime, 'hh24:mi:ss') ,'hh24:mi:ss') < to_date('18:00:00','hh24:mi:ss')  ) )
		    )
		)y
		on count>=0
	 ]]>
	</select>
	<insert id="mowork_approval_insert" parameterType="HashMap" > 
		
		insert into tbl_approval(approvalid, fk_formid, fk_empid, title, draftday, istemporary, fk_securityid, isdelete)
		values (APPROVALSEQ.nextval, 103, #{empid}, '근무체크수정신청', sysdate, 0,3,0)
	 
	</insert>
	
	<insert id="va_approval_insert" parameterType="HashMap" > 
		
		insert into tbl_approval(approvalid, fk_formid, fk_empid, title, draftday, istemporary, fk_securityid, isdelete)
		values (APPROVALSEQ.nextval, 104, #{empid}, '휴가신청', sysdate, 0,3,0)
	 
	</insert>
	
	<insert id="va_dayoff_insert" parameterType="HashMap" > 
		
		insert into tbl_dayoffapplication
		values (DAYOFFAPPROVALSEQ.nextval , APPROVALSEQ.CURRVAL ,   #{datepi}, #{vtype}, 1, #{reason})
	</insert>
	
	<insert id="work_modify_add_insert" parameterType="HashMap" > 
		
		insert into tbl_modifyworkrequest 
		values (MODIFYWORKREQUESTSEQ.nextval, APPROVALSEQ.CURRVAL, default,  to_date(#{time},'yyyy-mm-dd hh24:mi'), 3,'추가 요청',#{typemod})	
	</insert>
	
	<insert id="work_modify_del_insert" parameterType="HashMap" > 
		
		insert into tbl_modifyworkrequest 
		values (MODIFYWORKREQUESTSEQ.nextval, APPROVALSEQ.CURRVAL, #{deleteid},  default, 2,'삭제 요청',default)	
	</insert>
	
	<insert id="work_modify_edit_insert" parameterType="HashMap" > 
		
		insert into tbl_modifyworkrequest 
		values (MODIFYWORKREQUESTSEQ.nextval, APPROVALSEQ.CURRVAL, #{editid}, to_date(#{time},'yyyy-mm-dd hh24:mi'), 1,'수정 요청',default)	
	</insert>
	
	
	
	<insert id="procedure_insert" parameterType="HashMap" > 
		insert into tbl_approvalprocedure
	values(APPROVALPROCEDURESEQ.nextval,APPROVALSEQ.CURRVAL,#{ptype},#{empid}, #{status}, #{seq},0, sysdate  )
</insert>

	<select id="tardy_cnt"	parameterType="String" resultType="String">

	<![CDATA[ 
		 select count(*)
		from tbl_workhistory
		where ((worktype =6 and fk_empid =#{empid}) and( to_char(resisterdaytime,'yyyy' ) = to_char(sysdate, 'yyyy')  )  )
		        and to_char(resisterdaytime,'hh24:mi:ss' ) >  '09:00:00'
	 ]]>
	</select>
	
	<select id="early_work_cnt"	parameterType="String" resultType="String">

	<![CDATA[ 
	select  count(*)
	from tbl_workhistory
	where ((worktype =5 and fk_empid =#{empid}) and( to_char(resisterdaytime,'yyyy' ) = to_char(sysdate, 'yyyy')  )  )
	        and to_char(resisterdaytime,'hh24:mi:ss' ) <  '18:00:00'
		  ]]>
	</select>
	
	<select id="not_leave_work"	parameterType="String" resultType="String">

	<![CDATA[ 
	select  count(*)
	from tbl_workhistory
	where ((worktype =6 and fk_empid =#{empid}) and( to_char(resisterdaytime,'yyyy' ) = to_char(sysdate, 'yyyy')  )  )
	        and to_char(resisterDayTime,'yyyy-mm-dd') not in (select to_char(resisterDayTime,'yyyy-mm-dd') from tbl_workhistory where fk_empId = #{empid} and worktype =5)
	        
		  ]]>
	</select>
	
	<select id="workday_cnt"	parameterType="String" resultType="String">

	<![CDATA[ 
		select count(*) 
		from tbl_workhistory
		where (worktype =6 and fk_empid =#{empid}) and( to_char(resisterdaytime,'yyyy' ) = to_char(sysdate, 'yyyy')  ) 
		  ]]>
	</select>
	
	
	<select id="absenteeism"	parameterType="String" resultType="String">

	<![CDATA[ 
		select daysum-day as absen
from 
(
    SELECT count(TM.DATES)-1 as daysum
        
    FROM (	SELECT
                TO_CHAR(START_DT + LEVEL - 1, 'YYYY-MM-DD') DATES  
                ,TO_CHAR (START_DT + LEVEL - 1, 'D') DAYS  
            FROM (	SELECT 
                        TRUNC(SYSDATE,'MM') START_DT  
                        ,TO_NUMBER(TO_CHAR(SYSDATE, 'DD')) END_DT   
                    FROM DUAL ) A
            CONNECT BY LEVEL <= A.END_DT ) TM  
    WHERE TM.DAYS NOT IN ('1', '7')  
    ORDER BY TM.DATES ASC
)a join

(
    select  count(*)  as day
    from tbl_workhistory
    where (( worktype =6 and fk_empid =#{empid}) and( to_char(resisterdaytime,'yyyy' ) = to_char(sysdate, 'yyyy')  )  )
            and (TO_CHAR(resisterdaytime,'D') not IN ('1','7') )
)
b
on b.day >=0
		
		  ]]>
	</select>
	
	 
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	<!-- 예진 코드 시작 -->
	
	
	<!-- 인사설정_결재양식 -->
	<select id="getFormList" parameterType="HashMap"
		resultType="com.spring.app.approval.domain.FormVO">
		select
		formId,
		formName,
		description,
		isUse
		from tbl_form
		where <![CDATA[ formId <= 106 ]]>
	</select>



	<!-- 인사_관리자 설정_메인 화면 -->
	<select id="getAdminList"
		resultType="com.spring.app.common.domain.AdminVO">
		select
		adminId,
		empId,
		empName,
		substr(email, 0, instr(email,
		'@')-1) as id,
		'['||depName||'] '||teamName as team,
		to_char(ah.registerDay,'yyyy-mm-dd') as registerDay,
		isReadAllDocument,
		case adminType when '1' then '1' else '0' end as
		isFullAdmin
		from tbl_admin a
		join tbl_adminHistory ah on a.adminid =
		ah.fk_adminId
		join tbl_employee e on a.fk_empId = e.empId
		join tbl_team
		t on e.fk_teamId = t.teamId
		join tbl_department d on d.depid =
		t.fk_depid
		where (adminType = 1 or adminType = 2) and isDelete = 0
		order by empName
	</select>


	<!-- 인사_관리자설정 _관리자 설정 이력 -->
	<select id="getAdminHistoryList"
		resultType="com.spring.app.approval.domain.AdminHistoryVO">
		select * from
		(
		(
		select
		substr(e1.email, 0, instr(e1.email, '@')-1) as id,
		e1.empName,

		substr(e2.email, 0, instr(e2.email, '@')-1) as registerId,
		e2.empName as registerEmpName,
		to_char(ah.registerDay, 'yyyy-mm-dd hh24:mi:ss') as registerDay,
		1 as registerType

		from
		tbl_adminHistory ah
		join tbl_admin a on ah.fk_adminId = a.adminId
		join tbl_employee e1 on a.fk_empId = e1.empId
		join tbl_employee e2 on ah.fk_regEmpId = e2.empId
		where adminType = 1 or adminType = 2
		)

		union

		(
		select
		substr(e1.email, 0, instr(e1.email, '@')-1) as id,
		e1.empName,

		substr(e2.email, 0, instr(e2.email, '@')-1) as registerId,
		e2.empName as registerEmpName,
		to_char(ah.deleteDay, 'yyyy-mm-dd hh24:mi:ss') as registerDay,
		2 as registerType

		from
		tbl_adminHistory ah
		join tbl_admin a on ah.fk_adminId = a.adminId
		join tbl_employee e1 on a.fk_empId = e1.empId
		join tbl_employee e2 on ah.fk_delEmpId = e2.empId
		where adminType = 1 or adminType = 2
		)
		)

		order by registerDay desc
	</select>
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	<!-- 급여 -->
	
	
	<!-- 급여대장_메인 -->
	<select id="isExistPayrollThisMonth" parameterType="String"
		resultType="com.spring.app.personnel.domain.SalaryVO">
		select
		
		salaryId,
		s.fk_empId as empId,
		to_char(month, 'YYYY"년 "MM"월 "') as month,
		to_char(startDay, 'YYYY"년 "MM"월 "DD"일"') as startDay,
		to_char(endDay, 'YYYY"년 "MM"월 "DD"일"') as endDay,
		to_char(endDay, 'YYYY"년 "MM"월 "DD"일"') as payDay,
		to_char(registerDay, 'yyyy-mm-dd hh24:mi:ss') as registerDay,
		isFix,
        totalPay,
        totalDeduction,
        actualPay
        
		from
		tbl_salary s
        join 
        (select fk_salaryId,
        sum(totalPay) as totalPay,
        sum(totalDeduction) as totalDeduction,
        sum(actualPay) as actualPay 
        from
        tbl_salaryDetail group by 
        fk_salaryId)
        sd on s.salaryId = sd.fk_salaryid
		where to_char(month, 'yyyy-mm') = #{month}
	</select>
	
	<!-- 급여대장_메인 -->
	<select id="getSalaryDetail_withSearch" parameterType="HashMap"
		resultType="com.spring.app.personnel.domain.SalaryDetailVO">
		
		select
		
		salaryDetailId,
		fk_salaryId as salaryId,
		fk_empId as empId,
		basePay,
		overTimePay,
		nightTimePay,
		holidayPay,
		unUsedAnnualPay,
		totalPay,
		incomeTax,
		localTax,
		nationalPension,
		healthInsurance,
		longTermCareInsurance,
		totalDeduction,
		actualPay,
        empName,
        substr(e.email, 0, instr(e.email, '@')-1) as id,
        '[' || depName || '] ' || teamName as team,
        positionName
		
		from
		tbl_salaryDetail sd
        join tbl_employee e on sd.fk_empId = e.empId
        join tbl_team t on e.fk_teamId = t.teamId
        join tbl_department d on t.fk_depId = d.depId
        join tbl_position p on e.fk_positionId = p.positionId
        
		where fk_salaryId = #{salaryId}
		
		<if test='searchWord != ""'>
        	and
				(empName like '%'||lower(#{searchWord})||'%'
				or substr(email, 0, instr(email, '@')-1) like '%'||lower(#{searchWord})||'%')
		</if>
		<if test='orderType == "desc"'>order by empName desc</if>
		<if test='orderType == "asc"'>order by empName asc</if>
	</select>
	
	
	<!-- 급여대장_급여 확정 -->
	<update id="fixPayroll" parameterType="HashMap">
		update tbl_salary
		set isFix = #{isFix}
		where salaryId = #{salaryId}
	</update>
	
	
	<!-- 급여대장_급여 확정 삭제 위해 급여 상세 우선 삭제 -->
	<delete id="deleteSalaryDetail" parameterType="Long">
		delete from tbl_salaryDetail where fk_salaryId = #{salaryId}
	</delete>
	
	<!-- 급여대장_급여 확정 삭제 위해 급여 삭제 -->
	<delete id="deleteSalary" parameterType="Long">
		delete from tbl_salary where salaryId = #{salaryId}
	</delete>
	
	
	
	
	
	<!-- 급여대장_급여 등록_존재하는 사원인지 확인-->
	<select id="getEmpId" resultType="Long">
		select
		empId
		from tbl_employee
		where substr(email, 0, instr(email, '@')-1) = #{id} and empName = #{empName}
	</select>
	
	<!-- 급여대장_급여 등록용 시퀀스 값 취득 -->
	<select id="getSalarySequence"
		resultType="Long">
		select
		SALARYSEQ.nextVal
		from dual
	</select>
	
	<!-- 급여대장_급여 등록 -->
	<insert id="insertSalary" parameterType="com.spring.app.personnel.domain.SalaryVO">
		insert into tbl_salary
		values
		(#{salaryId}, #{empId}, to_date(#{month}||'-01', 'yyyy-mm-dd'), to_date(#{startDay}, 'yyyy-mm-dd'), to_date(#{endDay}, 'yyyy-mm-dd'), to_date(#{payDay}, 'yyyy-mm-dd'), default, 0)
	</insert>
	
	<!-- 급여대장_급여상세 등록 -->
	<insert id="insertSalaryDetail" parameterType="com.spring.app.personnel.domain.SalaryDetailVO">
		insert into tbl_salaryDetail
		values
		(SALARYDETAILSEQ.nextVal, #{salaryId}, #{empId}, #{basePay}, #{overTimePay}, #{nightTimePay}, #{holidayPay}, #{unUsedAnnualPay}, #{totalPay}, #{incomeTax}, #{localTax}, #{nationalPension}, #{healthInsurance}, #{longTermCareInsurance}, #{totalDeduction}, #{actualPay})
	</insert>


	<!-- 급여대장_급여 다운로드 받을시에 필요한 정보  -->
	<select id="getSalary" parameterType="String"
		resultType="com.spring.app.personnel.domain.SalaryVO">
		select
		
		salaryId,
		s.fk_empId as empId,
		to_char(month, 'YYYY"년 "MM"월 "') as month,
		to_char(startDay, 'YYYY"년 "MM"월 "DD"일"') as startDay,
		to_char(endDay, 'YYYY"년 "MM"월 "DD"일"') as endDay,
		to_char(payDay, 'YYYY"년 "MM"월 "DD"일"') as payDay,
		to_char(registerDay, 'yyyy-mm-dd hh24:mi:iss') as registerDay,
		isFix,
        totalPay,
        totalDeduction,
        actualPay
        
		from
		tbl_salary s
        join 
        (select fk_salaryId,
        sum(totalPay) as totalPay,
        sum(totalDeduction) as totalDeduction,
        sum(actualPay) as actualPay 
        from
        tbl_salaryDetail group by 
        fk_salaryId)
        sd on s.salaryId = sd.fk_salaryid
		where salaryId = #{salaryId}
	</select>
	
	
	
	
	<!-- 인사_급여 (개인) 메인화면  -->
	<select id="getSalaryByYear" parameterType="HashMap"
		resultType="com.spring.app.personnel.domain.SalaryVO">
		select
		
		salaryId,
		to_char(month, 'yyyy-mm') as month,
		to_char(startDay, 'yyyy-mm-dd') as startDay,
		to_char(endDay, 'yyyy-mm-dd') as endDay,
		to_char(payDay, 'yyyy-mm-dd') as payDay,
		totalPay,
		totalDeduction,
		actualPay
		
		from
		tbl_salary s
		join tbl_salaryDetail sd on s.salaryId = sd.fk_salaryId
		
		where
		sd.fk_empId = #{empId}
		and to_char(month, 'yyyy') = #{year}
		and isFix = 1
		
		<if test='orderType == "desc"'>order by month desc</if>
		<if test='orderType == "asc"'>order by month asc</if>
	</select>
	
	
	<!-- 인사_급여_급여명세서 보기 버튼 클릭시  -->
	<select id="getSalaryDetailBySalaryIdAndEmpId" parameterType="HashMap"
		resultType="com.spring.app.personnel.domain.SalaryDetailVO">
		select
		
		basePay,
		overTimePay,
		nightTimePay,
		holidayPay,
		unUsedAnnualPay,
		totalPay,
		incomeTax,
		localTax,
		nationalPension,
		healthInsurance,
		longTermCareInsurance,
		totalDeduction,
		actualPay,
		
        empName,
        '[' || depName || '] ' || teamName as team
		
		from
		tbl_salaryDetail sd
        join tbl_employee e on sd.fk_empId = e.empId
        join tbl_team t on e.fk_teamId = t.teamId
        join tbl_department d on t.fk_depId = d.depId
        join tbl_position p on e.fk_positionId = p.positionId
        
		where fk_salaryId = #{salaryId} and fk_empId = #{empId}
	</select>
	
	<!-- 예진 코드 끝 -->
</mapper>
